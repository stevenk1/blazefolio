@page "/"
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@using System.Linq
@using BlazeFolio.Components.Wallets
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Wallets</PageTitle>

<div Class="mb-4 mt-4 d-flex justify-space-between align-center">
    <div>
        <MudText Typo="Typo.h6">Wallets</MudText>
        <MudText Typo="Typo.body1">
          Manage your wallets and track your balances in real time</MudText>
    </div>
    @if (_wallets.Any())
    {
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  Size="Size.Medium" 
                  Rounded="true"
                  OnClick="OpenAddWalletDialog">
            Add Wallet
        </MudButton>
    }
</div>

<WalletsTable 
    Wallets="_wallets" 
    Loading="_loading"
    OnAddWallet="OpenAddWalletDialog"
    OnDeleteWallet="OpenDeleteWalletDialog"
    OnBuyStocks="OpenBuyStocksDialog" />

@code {
    private List<WalletsTable.WalletDisplay> _wallets = new();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletsAsync();
    }

    private async Task LoadWalletsAsync()
    {
        _loading = true;

        try
        {
            var result = await Mediator.Send(new GetAllWallets());

            if (result is { IsSuccess: true, Value: not null })
            {
                _wallets = result.Value.Select(wallet => new WalletsTable.WalletDisplay
                {
                    Id = wallet.Id.Value,
                    Name = wallet.Name,
                    Balance = 0.00m,
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            // Use the global error handler
            ErrorHandler.HandleException(ex, "Error loading wallets", "Wallets.LoadWalletsAsync");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddWalletDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true , CloseButton = true};

        var dialog = await DialogService.ShowAsync<AddWallet>("Add a new Wallet");
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets to show the newly added wallet
            await LoadWalletsAsync();
        }
    }
    
    private async Task OpenDeleteWalletDialog(WalletsTable.WalletDisplay wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };
        
        var dialog = await DialogService.ShowAsync<DeleteWallet>($"Delete {wallet.Name}", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets after deletion
            await LoadWalletsAsync();
        }
    }
    
    private async Task OpenBuyStocksDialog(WalletsTable.WalletDisplay wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };
        
        var dialog = await DialogService.ShowAsync<BuyStocks>($"Buy Stocks - {wallet.Name}", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is BuyStocks.StockPurchase purchase)
        {
            Snackbar.Add($"Added {purchase.Symbol} purchase to {wallet.Name}", Severity.Success);
            // You might want to reload wallet data here if needed
            // await LoadWalletsAsync();
        }
    }
}
