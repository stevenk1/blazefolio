@page "/"
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler

<PageTitle>Wallets</PageTitle>

<div Class="mb-4 mt-4">
    <MudText Typo="Typo.h6">Wallets</MudText>
    <MudText Typo="Typo.body1">
      Manage your wallets and track your balances in real time</MudText>
</div>

<MudTable Items="@_wallets" Hover="true" Elevation="0" Loading="@_loading">
    <HeaderContent >
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Address</MudTh>
        <MudTh>Balance</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate Context="wallet">
        <MudTd>@wallet.Name</MudTd>
        <MudTd>@wallet.Type</MudTd>
        <MudTd>@wallet.Address</MudTd>
        <MudTd>@wallet.Balance @wallet.Symbol</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Rounded="true"/>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" Rounded="true"/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <div class="d-flex flex-column align-center justify-center py-4">
            <MudIcon Icon="@Icons.Material.Filled.Wallet" Size="Size.Large" Color="Color.Secondary"
                     Class="mb-3"/>
            <MudText Class="mb-3">No wallets found. Add your first wallet to get started.</MudText>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Rounded="true">
                Add Wallet
            </MudButton>
        </div>
    </NoRecordsContent>
</MudTable>



@code {
    private List<WalletDisplay> _wallets = new();
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        await LoadWalletsAsync();
    }

    private async Task LoadWalletsAsync()
    {
        _loading = true;

        try
        {
            var result = await Mediator.Send(new GetAllWallets());

            if (result is { IsSuccess: true, Value: not null })
            {
                _wallets = result.Value.Select(wallet => new WalletDisplay
                {
                    Id = wallet.Id.Value.ToString(),
                    Name = wallet.Name,
                    // For demo purposes, using placeholders for fields not in the domain model
                    Type = "Crypto",
                    Address = $"{wallet.Id.Value.ToString()[..8]}...",
                    Balance = 0.00m,
                    Symbol = "BTC"
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            // Use the global error handler
            ErrorHandler.HandleException(ex, "Error loading wallets", "Wallets.LoadWalletsAsync");
        }
        finally
        {
            _loading = false;
        }
    }


    private class WalletDisplay
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public string Symbol { get; set; } = string.Empty;
    }

}
