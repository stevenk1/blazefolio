@page "/wallets"
@using BlazeFolio.Components.Shared
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Domain.WalletAggregate
@using BlazeFolio.Application.Wallets.Features.Commands
@using Microsoft.AspNetCore.Components.Forms
@using BlazeFolio.Application.Wallets.Features.Commands
@using Microsoft.AspNetCore.Components.Forms
@inject IMediator Mediator
@inject ISnackbar Snackbar

<PageTitle>Wallets</PageTitle>

<InfoSection>Add new wallets, view balances, and track your assets.</InfoSection>

<MudCard Elevation="0" Class="mb-4">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Your Wallets</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="@_wallets" Hover="true" Elevation="0" Loading="@_loading">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Balance</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate Context="wallet">
                <MudTd>@wallet.Name</MudTd>
                <MudTd>@wallet.Type</MudTd>
                <MudTd>@wallet.Address</MudTd>
                <MudTd>@wallet.Balance @wallet.Symbol</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" />
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No wallets found. Add your first wallet to get started.</MudText>
            </NoRecordsContent>
        </MudTable>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">Add Wallet</MudButton>
    </MudCardActions>
</MudCard>


@code {
    private List<WalletDisplay> _wallets = new();
    private bool _loading = true;
  

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletsAsync();
    }

    private async Task LoadWalletsAsync()
    {
        _loading = true;
        
        try
        {
            var result = await Mediator.Send(new GetAllWallets());
            
            if (result.IsSuccess && result.Value != null)
            {
                _wallets = result.Value.Select(wallet => new WalletDisplay
                {
                    Id = wallet.Id.Value.ToString(),
                    Name = wallet.Name,
                    // For demo purposes, using placeholders for fields not in the domain model
                    Type = "Crypto",
                    Address = $"{wallet.Id.Value.ToString()[..8]}...",
                    Balance = 0.00m,
                    Symbol = "BTC"
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            // Show error in a toaster notification
            Snackbar.Add($"Error loading wallets: {ex.Message}", Severity.Error);
            Console.Error.WriteLine($"Error loading wallets: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    
    
    private class WalletDisplay
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Address { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public string Symbol { get; set; } = string.Empty;
    }
}
