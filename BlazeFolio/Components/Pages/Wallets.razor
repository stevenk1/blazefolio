@page "/"
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@using System.Linq
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject IDialogService DialogService

<PageTitle>Wallets</PageTitle>

<div Class="mb-4 mt-4 d-flex justify-space-between align-center">
    <div>
        <MudText Typo="Typo.h6">Wallets</MudText>
        <MudText Typo="Typo.body1">
          Manage your wallets and track your balances in real time</MudText>
    </div>
    @if (_wallets.Any())
    {
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  Size="Size.Medium" 
                  Rounded="true"
                  OnClick="OpenAddWalletDialog">
            Add Wallet
        </MudButton>
    }
</div>

<MudTable Items="@_wallets" Hover="true" Elevation="0" Loading="@_loading">
    <HeaderContent >
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate Context="wallet">
        <MudTd>@wallet.Name</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Rounded="true"/>
            <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Small" Color="Color.Error" Rounded="true" OnClick="@(() => OpenDeleteWalletDialog(wallet))"/>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <div class="d-flex flex-column align-center justify-center py-4">
            <MudIcon Icon="@Icons.Material.Filled.Wallet" Size="Size.Large" Color="Color.Secondary"
                     Class="mb-3"/>
            <MudText Class="mb-3">No wallets found. Add your first wallet to get started.</MudText>
            <MudButton Color="Color.Primary" 
                      Variant="Variant.Filled" 
                      StartIcon="@Icons.Material.Filled.Add" 
                      Size="Size.Medium" 
                      Rounded="true"
                      OnClick="OpenAddWalletDialog">
                Add Wallet
            </MudButton>
        </div>
    </NoRecordsContent>
</MudTable>



@code {
    private List<WalletDisplay> _wallets = new();
    private bool _loading = true;


    protected override async Task OnInitializedAsync()
    {
        await LoadWalletsAsync();
    }

    private async Task LoadWalletsAsync()
    {
        _loading = true;

        try
        {
            var result = await Mediator.Send(new GetAllWallets());

            if (result is { IsSuccess: true, Value: not null })
            {
                _wallets = result.Value.Select(wallet => new WalletDisplay
                {
                    Id = wallet.Id.Value,
                    Name = wallet.Name,
                    Balance = 0.00m,
                }).ToList();
            }
        }
        catch (Exception ex)
        {
            // Use the global error handler
            ErrorHandler.HandleException(ex, "Error loading wallets", "Wallets.LoadWalletsAsync");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddWalletDialog()
    {
        var dialog = await DialogService.ShowAsync<Dialogs.AddWallet>("Add New Wallet");
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets to show the newly added wallet
            await LoadWalletsAsync();
        }
    }

    private async Task OpenDeleteWalletDialog(WalletDisplay wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };
        
        var dialog = await DialogService.ShowAsync<Dialogs.DeleteWallet>($"Delete {wallet.Name}", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets after deletion
            await LoadWalletsAsync();
        }
    }
    
    private class WalletDisplay
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Balance { get; set; }
    }

}
