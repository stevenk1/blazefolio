@page "/"
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@using System.Linq
@using BlazeFolio.Components.Wallets
@using System.Globalization
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Wallets</PageTitle>

<div Class="mb-4 mt-4 d-flex justify-space-between align-center">
    <div>
        <MudText Typo="Typo.h6">Wallets</MudText>
        <MudText Typo="Typo.body1">
          Manage your wallets and track your balances in real time</MudText>
    </div>
    @if (_wallets.Any())
    {
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  StartIcon="@Icons.Material.Filled.Add" 
                  OnClick="OpenAddWalletDialog"
                  Style="text-transform: none; font-size: 1rem; padding: 12px;">
            Add Wallet
        </MudButton>
    }
</div>

<WalletsGrid 
    Wallets="_wallets" 
    Loading="_loading"
    OnAddWallet="OpenAddWalletDialog"
    OnDeleteWallet="OpenDeleteWalletDialog"
    OnBuyStocks="OpenAddAssetDialog"
    OnViewDetails="ViewWalletDetails" />

@code {
    private List<WalletsGrid.WalletDisplay> _wallets = new();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletsAsync();
    }

    private async Task LoadWalletsAsync()
    {
        _loading = true;

        try
        {
            var result = await Mediator.Send(new GetAllWallets());

            if (result is { IsSuccess: true, Value: not null })
            {
                _wallets = result.Value.Select(wallet => new WalletsGrid.WalletDisplay
                {
                    Id = wallet.Id.Value,
                    Name = wallet.Name,
                    Balance = 0.00m,
                }).ToList();

                // Fetch market data for all wallets to calculate profits and market values
                await LoadWalletMarketDataAsync(_wallets);
            }
        }
        catch (Exception ex)
        {
            // Use the global error handler
            ErrorHandler.HandleException(ex, "Error loading wallets", "Wallets.LoadWalletsAsync");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenAddWalletDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true , CloseButton = true};

        var dialog = await DialogService.ShowAsync<AddWallet>("Add a new Wallet",options);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets to show the newly added wallet
            await LoadWalletsAsync();
        }
    }
    
    private async Task OpenDeleteWalletDialog(WalletsGrid.WalletDisplay wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };
        
        var dialog = await DialogService.ShowAsync<DeleteWallet>("Are you sure ?", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            // Reload wallets after deletion
            await LoadWalletsAsync();
        }
    }
    
    private async Task OpenAddAssetDialog(WalletsGrid.WalletDisplay wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };
        
        var dialog = await DialogService.ShowAsync<AddAsset>($"Add Asset - {wallet.Name}", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is AddAsset.Asset asset)
        {
            Snackbar.Add($"Added {asset.Symbol} purchase to {wallet.Name}", Severity.Success);
            // Reload wallets to reflect the new asset and update calculations
            await LoadWalletsAsync();
        }
    }

    private void ViewWalletDetails(WalletsGrid.WalletDisplay wallet)
    {
        NavigationManager.NavigateTo($"/wallet/{wallet.Id}");
    }

    private async Task LoadWalletMarketDataAsync(List<WalletsGrid.WalletDisplay> wallets)
    {
        try
        {
            foreach (var wallet in wallets)
            {
                var walletId = Domain.WalletAggregate.ValueObjects.WalletId.Create(wallet.Id);
                var walletResult = await Mediator.Send(new GetWalletById(walletId));

                if (!walletResult.IsSuccess || walletResult.Value == null)
                    continue;

                var walletData = walletResult.Value;

                // Skip if wallet has no assets
                if (!walletData.Assets.Any())
                    continue;

                // Get symbols to fetch current prices
                var symbols = walletData.Assets.Select(a => a.Symbol).Distinct().ToList();
                var pricesResult = await Mediator.Send(new GetCurrentMarketPrices(symbols));

                if (!pricesResult.IsSuccess)
                    continue;

                var prices = pricesResult.Value;
                decimal totalInvestment = 0;
                decimal totalMarketValue = 0;

                // Calculate total investment and current market value
                foreach (var asset in walletData.Assets)
                {
                    var investment = asset.Price * asset.Quantity;
                    totalInvestment += investment;

                    if (prices.TryGetValue(asset.Symbol, out var currentPrice) && currentPrice.HasValue)
                    {
                        var marketValue = currentPrice.Value * asset.Quantity;
                        totalMarketValue += marketValue;
                    }
                    else
                    {
                        // If no current price, use purchase price
                        totalMarketValue += investment;
                    }
                }

                // Update wallet display with calculated values
                wallet.Balance = totalInvestment;
                wallet.MarketValue = totalMarketValue;
                wallet.Profit = totalMarketValue - totalInvestment;
                wallet.ProfitPercentage = totalInvestment > 0 ? (wallet.Profit / totalInvestment) * 100 : 0;
                wallet.AssetCount = walletData.Assets.Count;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error loading wallet market data", "Wallets.LoadWalletMarketDataAsync");
        }
    }
}
