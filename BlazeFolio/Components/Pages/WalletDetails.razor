@page "/wallet/{WalletId:guid}"
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@using System.Linq
@using BlazeFolio.Components.Wallets
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Wallet Details</PageTitle>

@if (_loading)
{
    <MudContainer Class="d-flex justify-center align-center" Style="height: 400px;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudContainer>
}
else if (_wallet == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Wallet not found.</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary">
        Return to Wallets
    </MudButton>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudPaper Elevation="3" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <div>
                        <MudText Typo="Typo.h4">@_wallet.Name</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Wallet ID: @WalletId</MudText>
                    </div>
                    <div>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Primary" 
                                  StartIcon="@Icons.Material.Filled.ArrowBack" 
                                  OnClick="@(() => NavigationManager.NavigateTo("/wallets"))" 
                                  Class="mr-2">
                            Back to Wallets
                        </MudButton>
                    </div>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Balance Information</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Available Cash</MudText>
                                    <MudText Typo="Typo.h5">@_wallet.Balance.ToString("C2")</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Total Assets</MudText>
                                    <MudText Typo="Typo.h5"></MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudDivider Class="my-2" />
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Total Portfolio Value</MudText>
                                    <MudText Typo="Typo.h4" Color="Color.Primary">
                                       
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Performance</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Total Invested</MudText>
                                    <MudText Typo="Typo.h6">@_wallet.Assets.Sum(a => a.AveragePrice * a.Shares).ToString("C2")</MudText>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Total P/L</MudText>
                                    @{
                                        var totalProfitLoss = 0;//todo;
                                        var profitLossClass = totalProfitLoss >= 0 ? "mud-text-success" : "mud-text-error";
                                        var sign = totalProfitLoss >= 0 ? "+" : "";
                                    }
                                    <MudText Typo="Typo.h6" Class="@profitLossClass">
                                        @(sign)@totalProfitLoss.ToString("C2")
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12">
                                    <MudDivider Class="my-2" />
                                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">Return on Investment</MudText>
                          

                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12">
                    <MudCard Elevation="0" Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Portfolio Holdings</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton Variant="Variant.Filled" 
                                          Color="Color.Primary" 
                                          Size="Size.Small"
                                          StartIcon="@Icons.Material.Filled.Add"
                                          OnClick="@(() => OpenBuyStocksDialog(_wallet))">Add Asset</MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (!_wallet.Assets.Any())
                            {
                                <MudAlert Severity="Severity.Info" Class="my-2">No holdings found in this wallet yet.</MudAlert>
                            }
                            else
                            {
                                <MudTable Items="@_wallet.Assets" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false">
                                    <HeaderContent>
                                        <MudTh>Symbol</MudTh>
                                        <MudTh>Shares</MudTh>
                                        <MudTh>Avg. Price</MudTh>
                                        <MudTh>Current Price</MudTh>
                                        <MudTh>Actions</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="asset">
                                        <MudTd>@asset.Symbol</MudTd>
                                       
                                        <MudTd>@asset.Shares</MudTd>
                                        <MudTd>@asset.AveragePrice.ToString("C2")</MudTd>
                                        <MudTd>@asset.CurrentPrice.ToString("C2")</MudTd>
                                      
                                      
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Sell" 
                                                          Size="Size.Small"
                                                          OnClick="@(() => OpenSellAssetDialog(asset))" />
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12">
                    <MudCard Elevation="0" Outlined="true">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Recent Transactions</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (!_wallet.Assets.Any())
                            {
                                <MudAlert Severity="Severity.Info" Class="my-2">No transactions found for this wallet yet.</MudAlert>
                            }
                            else
                            {
                                <MudSimpleTable Hover="true" Style="overflow-x: auto;">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Type</th>
                                            <th>Symbol</th>
                                            <th>Shares</th>
                                            <th>Price</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var asset in _wallet.Assets.Take(5))
                                        {
                                            <tr>
                                                <td>@DateTime.Now.AddDays(-7).ToString("MM/dd/yyyy")</td>
                                                <td><span class="mud-text-primary">Buy</span></td>
                                                <td>@asset.Symbol</td>
                                                <td>@asset.Shares</td>
                                                <td>@asset.AveragePrice.ToString("C2")</td>
                                                <td>@((asset.AveragePrice * asset.Shares).ToString("C2"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </MudSimpleTable>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter]
    public Guid WalletId { get; set; }

    private WalletModel? _wallet;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadWalletAsync();
    }

    private async Task LoadWalletAsync()
    {
        _loading = true;

        try
        {
            var walletId = Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId);
            var result = await Mediator.Send(new GetWalletById(walletId));

            if (result.IsSuccess)
            {
                var walletDto = result.Value;
                _wallet = new WalletModel
                {
                    Id = walletDto.Id.Value,
                    Name = walletDto.Name,
                    Balance = 0,
                    Assets = walletDto.Assets.Select(a => new AssetModel
                    {
                        Id = a.Id.Value,
                        Symbol = a.Symbol,
                        Shares = a.Quantity,
                    }).ToList()
                };
            }
            else
            {
                Snackbar.Add($"Error loading wallet: {result.Error}", Severity.Error);
                _wallet = null;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error loading wallet details", "WalletDetails.LoadWalletAsync");
            _wallet = null;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenBuyStocksDialog(WalletModel wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AddAsset>($"Add asset to {wallet.Name}", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: AddAsset.Asset asset })
        {
            Snackbar.Add($"Added {asset.Symbol} purchase to {wallet.Name}", Severity.Success);
            await LoadWalletAsync();
        }
    }

    private async Task OpenSellAssetDialog(AssetModel asset)
    {
        // This would be implemented to show a dialog for selling assets
        // For now, we'll just show a snackbar message
        Snackbar.Add($"Sell functionality for {asset.Symbol} will be implemented in a future update", Severity.Info);
    }

    public class WalletModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public List<AssetModel> Assets { get; set; } = new();
    }

    public class AssetModel
    {
        public Guid Id { get; set; }
        public string Symbol { get; set; } = string.Empty;
        public int Shares { get; set; }
        public decimal AveragePrice { get; set; }
        public decimal CurrentPrice { get; set; }
    }
}
