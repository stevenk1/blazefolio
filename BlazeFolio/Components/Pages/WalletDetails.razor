@page "/wallet/{WalletId:guid}"
@using System.Globalization
@using MediatR
@using BlazeFolio.Application.Wallets.Features.Queries
@using BlazeFolio.Services
@using System.Linq
@using BlazeFolio.Components.Wallets
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Wallet Details</PageTitle>

@if (_loading)
{
    <MudContainer Class="d-flex justify-center align-center" Style="height: 400px;">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    </MudContainer>
}
else if (_wallet == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Wallet not found.</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary">
        Return to Wallets
    </MudButton>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
        <MudPaper Elevation="0" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.ArrowBack"
                               OnClick="@(() => NavigationManager.NavigateTo("/"))"
                               Class="mr-2">
                        Back to Wallets
                    </MudButton>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-space-between align-center">
                    <div>
                        <MudText Typo="Typo.h4">@_wallet.Name</MudText>
                        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Wallet ID: @WalletId</MudText>
                    </div>
                    <div>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@(() => OpenBuyStocksDialog(_wallet))">Add Asset
                        </MudButton>

                    </div>
                </MudItem>


                <MudItem xs="12" Class="mb-4">
                    @if (!_wallet.Assets.Any())
                    {
                        <MudAlert Severity="Severity.Info" Class="my-2">No holdings found in this wallet yet.</MudAlert>
                    }
                    else
                    {
                        <MudExpansionPanels MultiExpansion="true" Class="mt-3">
                            @foreach (var group in _wallet.Assets.GroupBy(a => a.Symbol))
                            {
                                var totalShares = group.Sum(a => a.Shares);
                                var totalValue = group.Sum(a => a.Price * a.Shares);
                                var totalCurrentValue = group.Sum(a => a.CurrentPrice.HasValue ? a.CurrentPrice.Value * a.Shares : 0);
                                   
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <div class="d-flex justify-space-between align-center" style="width: 100%">
                                                <div class="d-flex align-center">
                                                    <div>
                                                        <MudText Typo="Typo.h6">@(group.FirstOrDefault()?.LongName ?? group.Key)</MudText>
                                                        <MudText Typo="Typo.body2">@group.Key</MudText>
                                                        <MudText Typo="Typo.body2">Total Shares: @totalShares</MudText>
                                                    </div>
                                                    <MudButton Variant="Variant.Text"
                                                             Size="Size.Small"
                                                             Color="Color.Primary"
                                                             StartIcon="@Icons.Material.Filled.Add"
                                                             Class="ml-3"
                                                             OnClick="@(() => OpenBuyStocksDialogWithSymbol(_wallet, group.Key))">
                                                        Add More
                                                    </MudButton>
                                                </div>
                                            <div class="text-right">
                                                <MudText Typo="Typo.h6" Class="mud-primary-text">@totalCurrentValue.ToString("C", CultureInfo.GetCultureInfo($"en-{group.FirstOrDefault()?.Currency?[..2]}"))</MudText>
                                                @if (totalValue > 0 && totalCurrentValue > 0)
                                                {
                                                    var percentProfit = ((totalCurrentValue - totalValue) / totalValue) * 100;
                                                    var profitColor = percentProfit >= 0 ? Color.Success : Color.Error;
                                                    <MudText Typo="Typo.body2" Color="@profitColor">@(percentProfit >= 0 ? "+" : "")@percentProfit.ToString("0.00")%</MudText>
                                                }
                                            </div>
                                        </div>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudTable Items="@group" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" 
                                              Elevation="0"    Class="mt-2">
                                            <HeaderContent>
                                                <MudTh>Date</MudTh>
                                                <MudTh>Shares</MudTh>
                                                <MudTh>Price</MudTh>
                                                <MudTh>Current</MudTh>
                                                <MudTh>Change %</MudTh>
                                                <MudTh>Profit</MudTh>
                                                <MudTh>Value</MudTh>
                                                <MudTh></MudTh>
                                            </HeaderContent>
                                            <RowTemplate Context="asset">
                                                <MudTd>@asset.PurchaseDate.ToString("MM/dd/yyyy")</MudTd>
                                                <MudTd>@asset.Shares</MudTd>
                                                <MudTd>
                                                    @if (asset.Currency != null)
                                                    {
                                                        @asset.Price.ToString("C", CultureInfo.GetCultureInfo($"en-{asset.Currency[..2]}"))
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    @asset.CurrentPrice?.ToString("C", CultureInfo.GetCultureInfo($"en-{asset.Currency?[..2]}"))
                                                </MudTd>
                                                <MudTd>
                                                    @if (asset.CurrentPrice.HasValue)
                                                    {
                                                        var percentChange = ((asset.CurrentPrice.Value - asset.Price) / asset.Price) * 100;
                                                        var color = percentChange >= 0 ? Color.Success : Color.Error;
                                                        <MudText Color="@color">@(percentChange >= 0 ? "+" : "")@percentChange.ToString("0.00")%</MudText>
                                                    }
                                                    else
                                                    {
                                                        <span>--</span>
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    @if (asset.CurrentPrice.HasValue)
                                                    {
                                                        var profit = (asset.CurrentPrice.Value - asset.Price) * asset.Shares;
                                                        var color = profit >= 0 ? Color.Success : Color.Error;
                                                        <MudText Color="@color">@profit.ToString("C", CultureInfo.GetCultureInfo($"en-{asset.Currency?[..2]}"))</MudText>
                                                    }
                                                    else
                                                    {
                                                        <span>--</span>
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    @{
                                                        var assetValue = asset.CurrentPrice.HasValue ? (asset.CurrentPrice.Value * asset.Shares) : (asset.Price * asset.Shares);
                                                        @assetValue.ToString("C", CultureInfo.GetCultureInfo($"en-{asset.Currency?[..2]}"))
                                                    }
                                                </MudTd>
                                                <MudTd>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Sell"
                                                                   Size="Size.Small"
                                                                   OnClick="@(() => OpenSellAssetDialog(asset))"/>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                   Size="Size.Small"
                                                                   Color="Color.Error"
                                                                   OnClick="@(() => OpenDeleteAssetDialog(asset))"/>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                            }
                        </MudExpansionPanels>
                    }


                </MudItem>


            </MudGrid>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter] public Guid WalletId { get; set; }

    private WalletModel? _wallet;
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadWalletAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadWalletAsync();
    }

    private async Task LoadWalletAsync()
    {
        _loading = true;

        try
        {
            var walletId = Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId);
            var result = await Mediator.Send(new GetWalletById(walletId));

            if (result.IsSuccess)
            {
                var walletDto = result.Value;
                _wallet = new WalletModel
                {
                    Id = walletDto.Id.Value,
                    Name = walletDto.Name,
                    Balance = 0,
                    Assets = walletDto.Assets.Select(a => new AssetModel
                    {
                        Id = a.Id.Value,
                        Symbol = a.Symbol,
                        LongName = a.LongName,
                        Currency = a.Currency,
                        Shares = a.Quantity,
                        PurchaseDate = a.PurchaseDate,
                        Price = a.Price
                    }).ToList()
                };

                // Fetch current prices for all assets
                await LoadCurrentPricesAsync();
            }
            else
            {
                Snackbar.Add($"Error loading wallet: {result.Error}", Severity.Error);
                _wallet = null;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error loading wallet details", "WalletDetails.LoadWalletAsync");
            _wallet = null;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenBuyStocksDialog(WalletModel wallet)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AddAsset>($"Add asset to {wallet.Name}", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: AddAsset.Asset asset })
        {
            Snackbar.Add($"Added {asset.Symbol} purchase to {wallet.Name}", Severity.Success);
            await LoadWalletAsync();
        }
    }

    private async Task OpenBuyStocksDialogWithSymbol(WalletModel wallet, string symbol)
    {
        var parameters = new DialogParameters
        {
            { "WalletName", wallet.Name },
            { "WalletId", wallet.Id },
            { "Symbol", symbol }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<AddAsset>($"Add {symbol} to {wallet.Name}", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: AddAsset.Asset asset })
        {
            Snackbar.Add($"Added {asset.Symbol} purchase to {wallet.Name}", Severity.Success);
            await LoadWalletAsync();
        }
    }

    private async Task OpenDeleteAssetDialog(AssetModel asset)
    {
        var parameters = new DialogParameters
        {
            { "AssetSymbol", asset.Symbol },
            { "PurchaseDate", asset.PurchaseDate },
            { "Shares", asset.Shares },
            { "Price", asset.Price },
            { "WalletId", WalletId }
        };

        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<ConfirmDeleteAsset>($"Delete {asset.Symbol} Purchase", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add($"Deleted {asset.Shares} shares of {asset.Symbol}", Severity.Success);
            await LoadWalletAsync();
        }
    }

    private async Task OpenSellAssetDialog(AssetModel asset)
    {
        // This would be implemented to show a dialog for selling assets
        // For now, we'll just show a snackbar message
        Snackbar.Add($"Sell functionality for {asset.Symbol} will be implemented in a future update", Severity.Info);
    }

    private async Task LoadCurrentPricesAsync()
    {
        if (_wallet == null || !_wallet.Assets.Any())
            return;

        try
        {
            // Get unique symbols to avoid duplicate requests
            var uniqueSymbols = _wallet.Assets.Select(a => a.Symbol).Distinct().ToList();

            // Get all prices in a single batch request
            var result = await Mediator.Send(new GetCurrentMarketPrices(uniqueSymbols));

            if (result.IsSuccess)
            {
                var prices = result.Value;

                // Update all assets with their current prices
                foreach (var asset in _wallet.Assets)
                {
                    if (prices.TryGetValue(asset.Symbol, out var price) && price.HasValue)
                    {
                        asset.CurrentPrice = price.Value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error loading current prices", "WalletDetails.LoadCurrentPricesAsync");
        }
    }

    public class WalletModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public decimal Balance { get; set; }
        public List<AssetModel> Assets { get; set; } = new();
    }

    public class AssetModel
    {
        public Guid Id { get; set; }
        public string Symbol { get; set; } = string.Empty;
        public string? LongName { get; set; }
        public string? Currency { get; set; }
        public int Shares { get; set; }
        public decimal Price { get; set; }
        public DateTime PurchaseDate { get; set; }
        public decimal? CurrentPrice { get; set; }
    }

}
