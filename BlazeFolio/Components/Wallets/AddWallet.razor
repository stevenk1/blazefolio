@using BlazeFolio.Application.Wallets.Features.Commands
@using BlazeFolio.Services
@using MediatR
@using BlazeFolio.Domain.WalletAggregate
@using BlazeFolio.Components.Shared
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject ISnackbar Snackbar

<SharedDialog @ref="_dialog" Class="add-wallet-dialog">
    <MudForm Model="@_walletModel" @bind-IsValid="@_isValid">
        <MudText Typo="Typo.subtitle1" Class="mb-1">Wallet Name</MudText>
        <MudTextField @bind-Value="_walletModel.Name"
                      Placeholder="e.g., Tech Stocks, Retirement Fund"
                      Variant="Variant.Outlined"
                      Class="mb-4"
                      FullWidth="true" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth="true"
                   OnClick="Submit"
                   Style="text-transform: none; font-size: 1rem; padding: 12px;">
            Create Wallet
        </MudButton>
    </MudForm>
  
</SharedDialog>

@code {
    private SharedDialog _dialog = null!;
    private bool _isValid;
    private bool _processing;
    
    private readonly WalletModel _walletModel = new();
    
    private class WalletModel
    {
        public string Name { get; set; } = string.Empty;
    }
    
   
    
    private async Task Submit()
    {
        if (!_isValid || _processing) 
            return;
        
        _processing = true;
        
        try
        {
            var command = new AddWalletCommand
            {
                Name = _walletModel.Name,
                Type = WalletType.StockExchange
            };
            
            var result = await Mediator.Send(command);
            
            result.HandleResult(Snackbar, "Wallet added successfully", walletId => {
                _dialog.Close(walletId);
            });
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error adding wallet", "AddWallet.Submit");
        }
        finally
        {
            _processing = false;
        }
    }
}
