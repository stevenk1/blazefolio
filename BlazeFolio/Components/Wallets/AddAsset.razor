@using MediatR
@using BlazeFolio.Services
@using BlazeFolio.Components.Shared
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject ISnackbar Snackbar

<SharedDialog @ref="_dialog" Class="add-asset-dialog">
    <ChildContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudText Typo="Typo.subtitle1" Class="mb-1">Symbol</MudText>
            <MudTextField T="string" 
                          @bind-Value="Symbol" 
                          Required="true" 
                          RequiredError="Symbol is required"
                          Placeholder="e.g., AAPL, MSFT, TSLA"
                          Variant="Variant.Outlined"
                          ReadOnly="@(!string.IsNullOrEmpty(Symbol))"
                          FullWidth
                          OnBlur="FetchCurrentPriceAsync"
                          Class="mb-4" />
                          
                                      <MudText Typo="Typo.subtitle1" Class="mb-1">Purchase Date</MudText>
                                      <MudDatePicker @bind-Date="_purchaseDate"
                          Required="true"
                          RequiredError="Date is required"
                          Variant="Variant.Outlined"
                          Class="mb-4" />
                                      <MudGrid>
                                          <MudItem xs="6">
                                              <MudText Typo="Typo.subtitle1" Class="mb-1">Price</MudText>
                                              <div class="d-flex">
                                                  <MudNumericField T="decimal"
                                                      @bind-Value="_price" 
                                                      Required="true"
                                                      RequiredError="Price is required"
                                                      Min="0.01M"
                                                      Format="N2"
                                                      AdornmentIcon="@(!string.IsNullOrEmpty(_currency) ? null : Icons.Material.Filled.AttachMoney)"
                                                      AdornmentText="@(!string.IsNullOrEmpty(_currency) ? _currency : null)"
                                                      Adornment="Adornment.Start"
                                                      Variant="Variant.Outlined"
                                                      Disabled="@_loadingPrice"
                                                      FullWidth
                                                      Class="mb-4" />
                                                  @if (_loadingPrice)
                                                  {
                                                      <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="ml-2 mt-2" />
                                                  }
                                              </div>
                                          </MudItem>
                                          <MudItem xs="6">
                                              <MudText Typo="Typo.subtitle1" Class="mb-1">Quantity</MudText>
                                              <MudNumericField T="int"
                                    @bind-Value="_quantity" 
                                    Required="true"
                                    RequiredError="Quantity is required"
                                    Min="1"
                                    Variant="Variant.Outlined"
                                    FullWidth
                                    Class="mb-4" />
                                          </MudItem>
                                      </MudGrid>
        </MudForm>
    </ChildContent>
    <ActionContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   FullWidth
                   Disabled="@(!_isValid)"
                   OnClick="SubmitPurchase"
                   Style="text-transform: none; font-size: 1rem; padding: 12px;">
            Add Asset
        </MudButton>
    </ActionContent>
</SharedDialog>

@code {
    [Parameter] public Guid WalletId { get; set; }
    [Parameter] public string WalletName { get; set; } = string.Empty;
    [Parameter] public string Symbol { get; set; } = string.Empty;

    private SharedDialog _dialog = null!;
    private MudForm _form = null!;
    private bool _isValid;
    private bool _processing;
    private bool _loadingPrice;
    private DateTime? _purchaseDate = DateTime.Today;
    private decimal _price;
    private int _quantity = 1;
    private string? _currency;

    protected override async Task OnInitializedAsync()
    {
        // Ensure purchase date is set to today
        _purchaseDate = DateTime.Today;

        // If symbol is provided, load the current price
        if (!string.IsNullOrEmpty(Symbol))
        {
            await FetchCurrentPriceAsync();
        }
    }

    private async Task FetchCurrentPriceAsync()
    {
        if (string.IsNullOrEmpty(Symbol))
            return;

        _loadingPrice = true;
        StateHasChanged(); // Update UI to show loading indicator

        try
        {
            // Get current market price for the symbol
            var result = await Mediator.Send(new BlazeFolio.Application.Wallets.Features.Queries.GetCurrentMarketPrices(new List<string> { Symbol }));

            if (result.IsSuccess && result.Value.TryGetValue(Symbol, out var price) && price.HasValue)
            {
                _price = price.Value;
            }

            // Also fetch metadata to get currency information
            await FetchMetadataAsync();
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error fetching current price", "AddAsset.FetchCurrentPriceAsync");
        }
        finally
        {
            _loadingPrice = false;
            StateHasChanged(); // Update UI after loading completes
        }
    }

    private async Task FetchMetadataAsync()
    {
        if (string.IsNullOrEmpty(Symbol))
            return;

        try
        {
            // Get metadata for the symbol to retrieve currency information
            var metadataResult = await Mediator.Send(new BlazeFolio.Application.Wallets.Features.Queries.GetSymbolMetadata(new List<string> { Symbol }));

            if (metadataResult.IsSuccess && metadataResult.Value.TryGetValue(Symbol, out var metadata) && metadata != null)
            {
                _currency = metadata.Currency;
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error fetching symbol metadata", "AddAsset.FetchMetadataAsync");
        }
    }
    
    private void Cancel()
    {
        _dialog.Cancel();
    }

    private async Task SubmitPurchase()
    {
        if (!_isValid || !_purchaseDate.HasValue || _processing)
            return;

        _processing = true;

        try
        {
            var walletId = Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId);
            var result = await Mediator.Send(new BlazeFolio.Application.Wallets.Features.Commands.RecordAssetTransaction(
                walletId, 
                Symbol, 
                _purchaseDate.Value, 
                _price,
                _quantity));

            if (result.IsSuccess)
            {
                string priceDisplay = !string.IsNullOrEmpty(_currency) ? $"{_currency}{_price:N2}" : $"${_price:N2}";
                Snackbar.Add($"Recorded purchase of {_quantity} {Symbol} at {priceDisplay}", Severity.Success);
                _dialog.Close(new Asset(Symbol, _purchaseDate.Value, _price, _quantity, _currency));
            }
            else
            {
                Snackbar.Add($"Failed to record purchase: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error recording asset purchase", "AddAsset.SubmitPurchase");
            Snackbar.Add("Failed to record asset purchase", Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }
    
    public record Asset(string Symbol, DateTime PurchaseDate, decimal Price, int Quantity, string? Currency);
}
