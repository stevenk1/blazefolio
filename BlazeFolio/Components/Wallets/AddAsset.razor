@using MediatR
@using BlazeFolio.Services
@using BlazeFolio.Components.Shared
@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject ISnackbar Snackbar

<SharedDialog @ref="_dialog">
    <ChildContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudTextField T="string" 
                          Label="Symbol" 
                          @bind-Value="Symbol" 
                          Required="true" 
                          RequiredError="Symbol is required"
                          Class="mb-3" />
                          
            <MudDatePicker Label="Purchase Date" 
                          @bind-Date="_purchaseDate" 
                          Required="true"
                          RequiredError="Date is required"
                          Class="mb-3" />
                          
            <MudNumericField T="decimal" 
                            Label="Price" 
                            @bind-Value="_price" 
                            Required="true"
                            RequiredError="Price is required"
                            Min="0.01M"
                            Format="N2"
                            AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                            Adornment="Adornment.Start"
                            Class="mb-3" />
                            
            <MudNumericField T="int" 
                            Label="Quantity" 
                            @bind-Value="_quantity" 
                            Required="true"
                            RequiredError="Quantity is required"
                            Min="1"
                            Class="mb-3" />
        </MudForm>
    </ChildContent>
    <ActionContent>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Disabled="@(!_isValid)" 
                  OnClick="SubmitPurchase">
            Save
        </MudButton>
    </ActionContent>
</SharedDialog>

@code {
    [Parameter] public Guid WalletId { get; set; }
    [Parameter] public string WalletName { get; set; } = string.Empty;

    private SharedDialog _dialog = null!;
    private MudForm _form = null!;
    private bool _isValid;
    public string Symbol = string.Empty;
    private DateTime? _purchaseDate = DateTime.Today;
    private decimal _price;
    private int _quantity = 1;
    
    protected override void OnInitialized()
    {
        // Ensure purchase date is set to today
        _purchaseDate = DateTime.Today;
    }
    
    private void Cancel()
    {
        _dialog.Cancel();
    }

    private async Task SubmitPurchase()
    {
        if (!_isValid || !_purchaseDate.HasValue)
            return;

        try
        {
            var walletId = Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId);
            var result = await Mediator.Send(new BlazeFolio.Application.Wallets.Features.Commands.RecordStockPurchase(
                walletId, 
                Symbol, 
                _purchaseDate.Value, 
                _price,
                _quantity));

            if (result.IsSuccess)
            {
                Snackbar.Add($"Recorded purchase of {_quantity} {Symbol} at ${_price:N2}", Severity.Success);
                _dialog.Close(new StockPurchase(Symbol, _purchaseDate.Value, _price, _quantity));
            }
            else
            {
                Snackbar.Add($"Failed to record purchase: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error recording asset purchase", "AddAsset.SubmitPurchase");
            Snackbar.Add("Failed to record asset purchase", Severity.Error);
        }
    }
    
    public record StockPurchase(string Symbol, DateTime PurchaseDate, decimal Price, int Quantity);
}
