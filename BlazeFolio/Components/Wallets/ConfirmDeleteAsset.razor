@page "/dialog/confirm-delete-asset"

@using MediatR
@using BlazeFolio.Application.Wallets.Features.Commands
@using BlazeFolio.Services
@using BlazeFolio.Components.Shared
@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject ErrorHandler ErrorHandler

<SharedDialog @ref="_dialog" Class="confirm-delete-asset-dialog">
    <ChildContent>
        <MudText Class="mt-2">Are you sure you want to delete this purchase?</MudText>

        <MudCard Class="mt-4">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12">
                        <MudText><strong>Symbol:</strong> @AssetSymbol</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText><strong>Purchase Date:</strong> @PurchaseDate.ToString("MM/dd/yyyy")</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText><strong>Shares:</strong> @Shares</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText><strong>Price:</strong> @Price.ToString("C")</MudText>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </ChildContent>
    <ActionContent>
        <div class="d-flex justify-space-between">
            <MudButton OnClick="@Cancel" Color="Color.Primary" Variant="Variant.Text">Cancel</MudButton>
            <MudButton OnClick="@Confirm" Color="Color.Error" Variant="Variant.Filled">Delete</MudButton>
        </div>
    </ActionContent>
</SharedDialog>

@code {
    [Parameter] public string AssetSymbol { get; set; } = string.Empty;
    [Parameter] public DateTime PurchaseDate { get; set; }
    [Parameter] public int Shares { get; set; }
    [Parameter] public decimal Price { get; set; }
    [Parameter] public Guid WalletId { get; set; }
    [Parameter] public Guid AssetId { get; set; }

    private SharedDialog _dialog = null!;
    private bool _processing;

    private async Task Confirm()
    {
        if (_processing) return;

        _processing = true;

        try
        {
            var result = await Mediator.Send(new DeleteAsset(
                Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId),
                Domain.WalletAggregate.ValueObjects.AssetId.Create(AssetId)));

            result.HandleResult(
                Snackbar, 
                "Asset deleted successfully", 
                () => _dialog.Close(true),
                () => _dialog.Cancel()
            );
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error deleting asset", "ConfirmDeleteAsset.Confirm");
            Snackbar.Add("An error occurred while deleting the asset", Severity.Error);
            _dialog.Cancel();
        }
        finally
        {
            _processing = false;
        }
    }

    private void Cancel()
    {
        _dialog.Cancel();
    }
}
