@using MediatR
@using BlazeFolio.Application.Wallets.Features.Commands
@using BlazeFolio.Services
@using BlazeFolio.Components.Shared

@inject IMediator Mediator
@inject ErrorHandler ErrorHandler
@inject ISnackbar Snackbar

<SharedDialog @ref="_dialog" Class="delete-wallet-dialog">
    <ChildContent>
        <div class="d-flex flex-column align-center mb-4">
            <MudText Typo="Typo.body1" Align="Align.Center">
                You are about to delete wallet <strong>"@WalletName"</strong>. 
                This action cannot be undone.
            </MudText>
        </div>
    </ChildContent>
    <ActionContent>
        <MudButton Variant="Variant.Text" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Error" 
                  StartIcon="@Icons.Material.Filled.DeleteForever"
                  OnClick="DeleteWalletAsync">
            Delete
        </MudButton>
    </ActionContent>
</SharedDialog>

@code {
    private SharedDialog _dialog = null!;

    [Parameter] public string WalletName { get; set; } = string.Empty;
    [Parameter] public Guid WalletId { get; set; }

    private async Task DeleteWalletAsync()
    {
        try
        {
            var command = new DeleteWalletCommand(Domain.WalletAggregate.ValueObjects.WalletId.Create(WalletId));
            var result = await Mediator.Send(command);

            result.HandleResult(
                Snackbar, 
                $"Wallet '{WalletName}' was deleted successfully", 
                "Failed to delete wallet",
                () => _dialog.Close(true)
            );
        }
        catch (Exception ex)
        {
            ErrorHandler.HandleException(ex, "Error deleting wallet", "DeleteWallet.DeleteWalletAsync");
        }
    }

    private void Cancel() => _dialog.Cancel();
}
